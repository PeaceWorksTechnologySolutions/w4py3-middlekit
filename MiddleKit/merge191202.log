./Properties.py
3c3
< version = (1, 2, 2)
---
> version = ('X', 'Y', 0)
./Tests/FixPath.py
./Tests/MKRefresh.mkmodel/TestEmpty.py
./Tests/MKBasic.mkmodel/TestEmpty.py
18c18
<         print values
---
>         print(values)
./Tests/MKEnums.mkmodel/TestEmpty.py
./Tests/MKMultipleStores.mkmodel/TestSamples.py
./Tests/MKMultipleStores.mkmodel/TestEmpty.py
./Tests/MKObjRefReuse.mkmodel/TestSamples.py
./Tests/MKModelInh1.mkmodel/TestEmpty.py
18c18
<         print values
---
>         print(values)
./Tests/MKDefaultMinMax.mkmodel/TestSamples.py
./Tests/MKDefaultMinMax.mkmodel/TestEmpty.py
22c22
<         f.setL(long(x))
---
>         f.setL(int(x))
./Tests/MKList.mkmodel/TestSamples.py
7a8
>     print(f1, f1.bars(), f2, f2.bars() )
./Tests/MKList.mkmodel/TestEmpty.py
./Tests/MKExcel.mkmodel/CanRun.py
./Tests/MKExcel.mkmodel/TestEmpty.py
18c18
<         print values
---
>         print(values)
./Tests/LocalConfig.py
3,6c3,21
< storeArgs = {'database': 'test.db'}
< sqlCommand = 'python ExecuteScript.py "%s"'
< sqlVersionCommand = 'python ExecuteScript.py --version'
< # end
---
> storeArgs = {'database': '/tmp/test.db' }
> sqlCommand = 'python3 ExecuteScript.py "%s"'
> sqlVersionCommand = 'python3 ExecuteScript.py --version'
> 
> #dbName = 'Firebird'
> #storeArgs = {'database': '/tmp/test.fdb', 'user':'SYSDBA','password':'masterkey' }
> #sqlCommand = 'isql-fb -u SYSDBA -p masterkey /tmp/test.fdb  ' 
> #sqlVersionCommand = 'isql-fb -x -z '
> 
> #dbName = 'MySQL'
> #storeArgs = {'host':'galera-inhouse', 'user': 'root', 'passwd': 'node'}
> #sqlCommand = 'mysql -h galera-inhouse -u root -pnode'
> #sqlVersionCommand = 'mysql --version'
> #DropStatements='tables'
> 
> #dbName='PostgreSQL'
> #storeArgs={'database':'test'} #'host':'localhost','user':'nico'}
> #sqlCommand='psql test ' #pg_hba.conf trust
> #sqlVersionCommand='psql -V'
7a23,26
> 
> 
> 
> # end
./Tests/MKInheritance.mkmodel/TestEmpty.py
./Tests/WorkDir/Person.py
./Tests/WorkDir/GeneratedPy/GenDummy.py
./Tests/WorkDir/GeneratedPy/GenPerson.py
./Tests/WorkDir/GeneratedPy/GenFoo.py
38c38
<             if isinstance(value, long):
---
>             if isinstance(value, int):
40,41c40,41
<                 if isinstance(value, long):
<                     raise OverflowError(value)
---
>                 #if isinstance(value, int):
>                 #    raise OverflowError(value)
./Tests/WorkDir/GeneratedPy/__init__.py
./Tests/WorkDir/GeneratedPy/GenThing.py
35c35
<             if not isinstance(value, basestring):
---
>             if not isinstance(value, str):
63c63
<             if not isinstance(value, basestring):
---
>             if not isinstance(value, str):
./Tests/WorkDir/Foo.py
./Tests/WorkDir/Dummy.py
./Tests/WorkDir/Thing.py
./Tests/TestThreads.py
21,23c21,23
<         print
<         print 'secs: %0.2f' % duration
<         print 'mins: %0.2f' % (duration/60.0)
---
>         print()
>         print('secs: %0.2f' % duration)
>         print('mins: %0.2f' % (duration/60.0))
56c56
<             print '>> numThreads:', numThreads
---
>             print('>> numThreads:', numThreads)
./Tests/TestRun.py
1c1
< #!/usr/bin/env python
---
> #!/usr/bin/env python2
19c19
<             print 'No such file', pyFilename
---
>             print('No such file', pyFilename)
22c22
<         print 'Testing %s...' % filename
---
>         print('Testing %s...' % filename)
27c27
<         exec src in names
---
>         exec(src, names)
29,32d28
<         #if dbName=='Firebird':
<         #    suite= os.path.split( os.path.splitext(filename)[0] )[-1] #for examle MKBasic
<         #    storeArgs['database']='../WorkDir/%s.fdb'  % suite
<         #print storeArgs
39c35
<             print 'Deleting all database records for test...'
---
>             print('Deleting all database records for test...')
41c37
<             for klass in store.model().klasses().values():
---
>             for klass in list(store.model().klasses().values()):
48c44
<         execfile(pyFilename, results)
---
>         exec(compile(open(pyFilename).read(), pyFilename, 'exec'), results)
55,56c51,52
<     print 'TestRun.py <model> <config file> <py file> [delete=no|yes]'
<     print
---
>     print('TestRun.py <model> <config file> <py file> [delete=no|yes]')
>     print()
./Tests/MKModelInh2.mkmodel/TestEmpty.py
17c17
<         print values
---
>         print(values)
./Tests/MKDateTime.mkmodel/TestSamples.py
16c16
<     match = value == store.filterDateTimeDelta(datetime.time(13, 01))
---
>     match = value == store.filterDateTimeDelta(datetime.time(13, 0o1))
18c18
<         match = value == datetime.timedelta(hours=13, minutes=01)
---
>         match = value == datetime.timedelta(hours=13, minutes=0o1)
./Tests/MKDateTime.mkmodel/TestEmpty.py
13c13
<     print 'Testing with strings.'
---
>     print('Testing with strings.')
30c30
<     print 'Testing with the datetime module.'
---
>     print('Testing with the datetime module.')
44c44
<     t = datetime.time(16, 04)
---
>     t = datetime.time(16, 0o4)
68c68
<     print 'Testing None.'
---
>     print('Testing None.')
./Tests/LocalConfig
-
fb
Kopie.py
./Tests/MKClone.mkmodel/TestEmpty.py
./Tests/MKMultipleThreads.mkmodel/TestEmpty.py
5a6
> from random import Random
15c16,20
<     from random import Random
---
>     #from random import Random, random
>     #import os
>     return [ Random() for _ in range(num-1)]
>     #return [ Random(os.urandom(4)) for _ in range(num-1)]
> 
58c63
<             print '%s: %s' % (self.getName(), msg)
---
>             print('%s: %s' % (self.getName(), msg))
116c121
<     gens = create_generators(numthreads, 1000000)
---
>     gens = create_generators(numthreads, 100) #0000)
119c124,126
<         t = Worker(store, gens[i], allsaved, 10)
---
>         #t = Worker(store, gens[i], allsaved, 10)
>         gens.append( Random())
>         t = Worker(store, gens.pop(), allsaved, 10)
125c132
<     print 'main thread: saving all changes'
---
>     print('main thread: saving all changes')
./Tests/MKDelete.mkmodel/TestEmpty.py
13c13
<     print '*** passed testOther'
---
>     print('*** passed testOther')
20c20
<     print '*** passed testSelf'
---
>     print('*** passed testSelf')
27c27
<     print '*** passed testSelfList'
---
>     print('*** passed testSelfList')
31c31
<     print '*** passed testListUpdate'
---
>     print('*** passed testListUpdate')
189c189
<     print
---
>     print()
./Tests/LocalConfig
-
sqlite
Kopie.py
./Tests/MKTypeValueChecking.mkmodel/TestEmpty.py
11a12
>                 print(attr,value)
47c48
<         f.setI(2L**32)
---
>         f.setI(2**32)
61c62
<     f.setI(1L)  # ints can take longs that fit in the int range
---
>     f.setI(1)  # ints can take longs that fit in the int range
64c65
<     f.setF(1L)  # floats can take longs
---
>     f.setF(1)  # floats can take longs
./Tests/MKDump.mkmodel/TestSamples.py
8c8
<     print command
---
>     print(command)
./Tests/ExecuteScript.py
13c13
<     exec src in names
---
>     exec(src, names)
19c19
<         print "%s (%s)" % (store.dbVersion(), store.dbapiVersion())
---
>         print("%s (%s)" % (store.dbVersion(), store.dbapiVersion()))
24c24
<             print 'No such file', filename
---
>             print('No such file', filename)
27c27
<         print 'Executing %s...' % filename
---
>         print('Executing %s...' % filename)
41,42c41,42
<     print 'ExecuteScript.py <sql file>'
<     print
---
>     print('ExecuteScript.py <sql file>')
>     print()
./Tests/MKInheritanceAbstract.mkmodel/TestEmpty.py
./Tests/MKString.mkmodel/TestEmpty.py
7c7,8
<     c70000 = 'c'*60000 #reduced from 70000 to get rid of fb limit
---
>     #c70000 = 'c'*70000
>     c70000 = 'c'*60000 #get rid of fb2 limit
32c33
<     assert result.max500() == difficultString #problem with backslash
---
>     assert result.max500() == difficultString #problem with backslash??
./Tests/MKModelInh3.mkmodel/TestEmpty.py
./Tests/MKDeleteMark.mkmodel/TestEmpty.py
13c13
<     print '*** passed testOther'
---
>     print('*** passed testOther')
20c20
<     print '*** passed testSelf'
---
>     print('*** passed testSelf')
27c27
<     print '*** passed testSelfList'
---
>     print('*** passed testSelfList')
170c170
<     print
---
>     print()
./Tests/TestDesign.py
1c1
< #!/usr/bin/env python
---
> #!/usr/bin/env python2
12c12
<     print 'importing classes:', ', '.join(klasses)
---
>     print('importing classes:', ', '.join(klasses))
17c17
<         exec code in results
---
>         exec(code, results)
42c42
<     print command
---
>     print(command)
48,51c48,51
<             print 'getcwd:', os.getcwd()
<             print 'listdir:', os.listdir('.')
<             print 'model path:', repr(toTestDir+modelFilename)
<             print 'sys.path', sys.path
---
>             print('getcwd:', os.getcwd())
>             print('listdir:', os.listdir('.'))
>             print('model path:', repr(toTestDir+modelFilename))
>             print('sys.path', sys.path)
66c66
<         print '>> ABOUT TO EXIT WITH CODE 1'
---
>         print('>> ABOUT TO EXIT WITH CODE 1')
./Tests/MKObjRef.mkmodel/TestEmpty3.py
./Tests/MKObjRef.mkmodel/TestSamples.py
./Tests/MKObjRef.mkmodel/TestEmpty2.py
./Tests/MKObjRef.mkmodel/TestEmpty1.py
./Tests/MKNone.mkmodel/TestEmpty.py
58c58
<         print values
---
>         print(values)
./Tests/MKBackRef.mkmodel/TestSamples.py
9c9
<             assert n.value() == ''.join(map(lambda c: c.value(), children))
---
>             assert n.value() == ''.join([c.value() for c in children])
./Tests/Test.py
1c1
< #!/usr/bin/env python
---
> #!/usr/bin/env python2
2a3
> #__path__='/home/nico/Downloads/w4py3-master/webware/MiddleKit/Tests/'
44c45
<             print '*** %s ***\n' % self._modelName
---
>             print('*** %s ***\n' % self._modelName)
69c70
<         print
---
>         print()
71c72
<         print '%.0f seconds' % (duration)
---
>         print('%.0f seconds' % (duration))
89c90
<             file = open(path)
---
>             f= open(path)
91c92
<             exec file in names
---
>             exec(f.read(), names)
99c100
<         rmdir(workDir) #moved upwards nico20191130
---
>         rmdir(workDir) #moved upwards nl20191130
105c106
<         print '\n'
---
>         print('\n')
122c123
<             print '%s:' % pyFile
---
>             print('%s:' % pyFile)
124c125
<             self.run('python TestRun.py %s %s %s delete=%s' % (
---
>             self.run('python3 TestRun.py %s %s %s delete=%s' % (
127c128
<             print 'NO %s TO TEST.' % pyFile
---
>             print('NO %s TO TEST.' % pyFile)
130c131
<         self.run('python TestDesign.py %s %s' % (
---
>         self.run('python3 TestDesign.py %s %s' % (
144,145c145,147
<         if os.path.exists('/Temp/mktemp.fdb'):
<             os.unlink('/Temp/Mktemp.fdb')
---
>         if os.path.exists('/tmp/mktemp.fdb'):
>             os.unlink('/tmp/mktemp.fdb')
>         #os.system("""echo "CREATE DATABASE '/tmp/monkey.fdb' page_size 8192 user 'SYSDBA' password 'masterkey'; " > isql """)
153,158c155,160
<         print
<         print 'SYSTEM INFO'
<         print '-----------'
<         print 'sys.version =', sys.version
<         print 'sys.platform =', sys.platform
<         print 'os.name =', os.name
---
>         print()
>         print('SYSTEM INFO')
>         print('-----------')
>         print('sys.version =', sys.version)
>         print('sys.platform =', sys.platform)
>         print('os.name =', os.name)
160,162c162,164
<             print 'sys.getwindowsversion() =', sys.getwindowsversion()
<         print 'os.getcwd() =', os.getcwd()
<         print 'dbName =', dbName
---
>             print('sys.getwindowsversion() =', sys.getwindowsversion())
>         print('os.getcwd() =', os.getcwd())
>         print('dbName =', dbName)
165a168
>         
171,172c174,175
<         exec 'import MiddleKit.Properties' in values
<         exec 'import MiddleKit.Run.' + objStoreName in values
---
>         exec('import MiddleKit.Properties',values)
>         exec('import MiddleKit.Run.' + objStoreName, values)
176c179
<         modules = sorted((m for m in sys.modules.values()
---
>         modules = sorted((m for m in list(sys.modules.values())
193,195c196,198
<         print
<         print 'RESULTS'
<         print '-------'
---
>         print()
>         print('RESULTS')
>         print('-------')
199c202
<             print outcome, name
---
>             print(outcome, name)
215c218
<         print '<cmd>', cmd
---
>         print('<cmd>', cmd)
./Tests/TestCommon.py
19c19
<         print 'Removing %s...' % dirname
---
>         print('Removing %s...' % dirname)
49d48
<     print "ImportError: cant import localconfig"
./Run/MiddleObject.py
3c3
< from types import InstanceType
---
> #from types import InstanceType
10c10
< import ObjectStore
---
> from . import ObjectStore
165c165
<         assert isinstance(value, (int, long)), \
---
>         assert isinstance(value, int), \
282c282,283
<                     if isinstance(value, (MiddleObject, InstanceType)):
---
>                     #if isinstance(value, (MiddleObject, InstanceType)):
>                     if isinstance(value, MiddleObject):
284c285
<                     elif isinstance(value, long):
---
>                     elif isinstance(value, int):
493c494
<         print ('WARNING: MiddleKit: In object %(rep)s, attribute'
---
>         print(('WARNING: MiddleKit: In object %(rep)s, attribute'
495c496
<             ' %(klassName)s.%(objSerialNum)s' % locals())
---
>             ' %(klassName)s.%(objSerialNum)s' % locals()))
./Run/Dump.py
1c1
< #!/usr/bin/env python
---
> #!/usr/bin/env python2
27c27
<             print 'took location from __file__'
---
>             print('took location from __file__')
32c32
<             print 'took location from sys.argv[0]'
---
>             print('took location from sys.argv[0]')
35c35
<         print 'location =', location
---
>         print('location =', location)
50c50
<                 print 'MiddleKit in location'
---
>                 print('MiddleKit in location')
54c54
<                 print 'new location =', location
---
>                 print('new location =', location)
57c57
<             print 'final location =', location
---
>             print('final location =', location)
60,62c60,62
<         print 'path =', sys.path
<         print
<         print 'importing MiddleKit...'
---
>         print('path =', sys.path)
>         print()
>         print('importing MiddleKit...')
65c65
<         print 'done.'
---
>         print('done.')
97c97
<             conn = raw_input()
---
>             conn = input()
108,118c108,118
<             print '%s: error: %s' % (progName, errorMsg)
<         print 'Usage: %s --db DBNAME --model FILENAME' % progName
<         print '       %s -h | --help' % progName
<         print
<         print 'Options:'
<         print '    --prompt-for-args Prompt for args to use for initializing store (i.e. password)'
<         print '    --show-progress   Print a dot on stderr as each class is processed'
<         print '                      (useful when dumping large databases)'
<         print
<         print '       * DBNAME can be: %s' % ', '.join(self.databases())
<         print
---
>             print('%s: error: %s' % (progName, errorMsg))
>         print('Usage: %s --db DBNAME --model FILENAME' % progName)
>         print('       %s -h | --help' % progName)
>         print()
>         print('Options:')
>         print('    --prompt-for-args Prompt for args to use for initializing store (i.e. password)')
>         print('    --show-progress   Print a dot on stderr as each class is processed')
>         print('                      (useful when dumping large databases)')
>         print()
>         print('       * DBNAME can be: %s' % ', '.join(self.databases()))
>         print()
124c124
<         if isinstance(args, basestring):
---
>         if isinstance(args, str):
./Run/PostgreSQLObjectStore.py
22c22
< from MiddleObject import MiddleObject
---
> from .MiddleObject import MiddleObject
24c24
< from SQLObjectStore import SQLObjectStore, UnknownSerialNumberError
---
> from .SQLObjectStore import SQLObjectStore, UnknownSerialNumberError
./Run/PerThreadList.py
3c3
< import thread
---
> import _thread
23c23
<     def append(self, item, gettid=thread.get_ident):
---
>     def append(self, item, gettid=_thread.get_ident):
30c30
<     def extend(self, items, gettid=thread.get_ident):
---
>     def extend(self, items, gettid=_thread.get_ident):
37c37
<     def clear(self, allThreads=False, gettid=thread.get_ident):
---
>     def clear(self, allThreads=False, gettid=_thread.get_ident):
52c52
<     def items(self, allThreads=False, gettid=thread.get_ident):
---
>     def items(self, allThreads=False, gettid=_thread.get_ident):
55c55
<             for v in self.data.values():
---
>             for v in list(self.data.values()):
65c65
<     def isEmpty(self, gettid=thread.get_ident):
---
>     def isEmpty(self, gettid=_thread.get_ident):
67c67
<         for v in self.data.values():
---
>         for v in list(self.data.values()):
72c72
<     def __len__(self, gettid=thread.get_ident):
---
>     def __len__(self, gettid=_thread.get_ident):
79c79
<     def __getitem__(self,  i, gettid=thread.get_ident):
---
>     def __getitem__(self,  i, gettid=_thread.get_ident):
135c135
<         print i
---
>         print(i)
142c142
<         print i
---
>         print(i)
148c148
<     assert len(s.items()) == 3
---
>     assert len(list(s.items())) == 3
./Run/ObjectKey.py
37,41c37,43
<     def __cmp__(self, other):
<         result = cmp(self._className, other._className)
<         if result == 0:
<             result = cmp(self._serialNum, other._serialNum)
<         return result
---
>     #def __cmp__(self, other):
>     #     result = cmp(self._className, other._className)
>     #    if result == 0:
>     #        result = cmp(self._serialNum, other._serialNum)
>     #    return result
>     def __eq__(self, other ):
>         return self._className == other._className and self._serialNum == other._serialNum
./Run/MSSQLObjectStore.py
5c5
< from SQLObjectStore import SQLObjectStore
---
> from .SQLObjectStore import SQLObjectStore
./Run/SQLObjectStore.py
3,5c3,5
< from MiddleObject import MiddleObject
< from ObjectStore import ObjectStore, UnknownObjectError
< from ObjectKey import ObjectKey
---
> from .MiddleObject import MiddleObject
> from .ObjectStore import ObjectStore, UnknownObjectError
> from .ObjectKey import ObjectKey
71c71
<         for item in self.__dict__.items():
---
>         for item in list(self.__dict__.items()):
468c468
<         if isinstance(transaction, basestring):
---
>         if isinstance(transaction, str):
581c581
<         assert isinstance(objRef, long), 'type=%r, objRef=%r' % (type(objRef), objRef)
---
>         assert isinstance(objRef, int), 'type=%r, objRef=%r' % (type(objRef), objRef)
616c616
<         assert isinstance(objRef, long), 'type=%r, objRef=%r' % (type(objRef), objRef)
---
>         assert isinstance(objRef, int), 'type=%r, objRef=%r' % (type(objRef), objRef)
698c698
<             for klass in self.model().klasses().values():
---
>             for klass in list(self.model().klasses().values()):
712c712
<         for klass in self.model().klasses().values():
---
>         for klass in list(self.model().klasses().values()):
719c719
<         for klass in self.model().klasses().values():
---
>         for klass in list(self.model().klasses().values()):
796d795
<                 
804,805c803
<             #print "ATTR>>>", attr.name(), value
<             if isinstance(value, basestring):
---
>             if isinstance(value, str):
825c823
<         for attr in self._mk_changedAttrs.values():
---
>         for attr in list(self._mk_changedAttrs.values()):
1089d1086
< 
1101c1098
<         if not isinstance(value, basestring):
---
>         if not isinstance(value, str):
1104,1119d1100
< 
< 
< 
< def quote(val):
<     return val.replace("'","''")
< #2019-01-12, 2019-11-28
< class EnumAttr(object):
<     def sqlForNonNone(self, value):
<         try:
<             int(value) #usesExternalSQLEnums
<             return str(value)
<         except:
<             return "'%s'" % quote(value)
<         
<         
<     
\ Kein Zeilenumbruch am Dateiende.
./Run/SQLiteObjectStore.py
3c3
< from SQLObjectStore import SQLObjectStore, quote
---
> from .SQLObjectStore import SQLObjectStore
17,18d16
<         #args['isolation_level']=None
<         #args['timeout']=10
23,25c21
<         conn= self.dbapiModule().connect(**kwargs)
<         #conn.text_factory=str #patch for mkfkt Umlaute
<         return conn
---
>         return self.dbapiModule().connect(**kwargs)
35,36c31,34
<             cur.execute(sql, clausesArgs or tuple() )
<             
---
>             if clausesArgs is None:
>                 cur.execute(sql)
>             else:
>                 cur.execute(sql, clausesArgs)
50,65d47
< from string import lower 
< class Klass(object):
< 
<     def sqlTableName(self):
<         s = self.name()
<         
<         if lower(s) in ('role',):
<             return '"Role"'
<         elif s=='Order':
<             return 'Orders'
<         else:
<             return s
< 
< 
< #def quote(val):
< #    return val.replace("'","''")
69c51
<         return "'%s'" % quote(value)
---
>         return "'%s'" % value.replace("'", "''")
./Run/FirebirdObjectStore.py
4,5c4,5
< from kinterbasdb import Warning, DatabaseError
< import kinterbasdb as dbi
---
> from fdb import DatabaseError
> import fdb as dbi
14c14,15
< from SQLObjectStore import SQLObjectStore, UnknownSerialNumberError
---
> from .SQLObjectStore import SQLObjectStore, UnknownSerialNumberError
> 
16d16
< import sys
17a18,26
>     def dbapiVersion(self):
>         """Return the version of the DB API module."""
>         module = self.dbapiModule()
>         return '%s %s' % (module.__name__, module.__version__)
> 
>     def dbVersion(self ):
>         return 'embedded'
>     
> 
33c42,43
<         return self.dbapiModule().connect(**args)
---
>         conn=self.dbapiModule().connect( **args)
>         return conn
91c101,102
<         return "lower(%s ) like lower(%s)" % (a, b) #or "similar to "
---
>         return "lower(%s ) like lower(%s)" % (a, b)
>         #return "lower(%s ) similar to lower(%s)" % (a, b)
98c109
< from string import lower 
---
> #from string import lower 
104c115
<         if lower(x) in ('role',):
---
>         if x.lower() in ('role',):
./Run/__init__.py
./Run/PerThreadDict.py
3c3
< import thread
---
> import _thread
26c26
<     def __setitem__(self, key, item, gettid=thread.get_ident):
---
>     def __setitem__(self, key, item, gettid=_thread.get_ident):
34c34
<     def clear(self, allThreads=False, gettid=thread.get_ident):
---
>     def clear(self, allThreads=False, gettid=_thread.get_ident):
45c45
<         for v in self.data.values():
---
>         for v in list(self.data.values()):
50c50
<     def values(self, allThreads=False, gettid=thread.get_ident):
---
>     def values(self, allThreads=False, gettid=_thread.get_ident):
53,54c53,54
<             for v in self.data.values():
<                 r.extend(v.values())
---
>             for v in list(self.data.values()):
>                 r.extend(list(v.values()))
59c59
<                 return self.data[threadid].values()
---
>                 return list(self.data[threadid].values())
63c63
<     def __len__(self, gettid=thread.get_ident):
---
>     def __len__(self, gettid=_thread.get_ident):
95c95
<         return self.data.values()
---
>         return list(self.data.values())
109,110c109,110
<     for i in d.values():
<         print i
---
>     for i in list(d.values()):
>         print(i)
116,117c116,117
<     for i in d.values():
<         print i
---
>     for i in list(d.values()):
>         print(i)
123c123
<     assert len(d.values()) == 3
---
>     assert len(list(d.values())) == 3
./Run/MySQLObjectStore.py
1c1,6
< import new
---
> #import new
> from types import MethodType as instancemethod
> 
> 
> import pymysql
> pymysql.install_as_MySQLdb()
6c11
< from SQLObjectStore import SQLObjectStore
---
> from .SQLObjectStore import SQLObjectStore
66a72
>                 print("patching pool connection")
76c82
<                 pool.connection = new.instancemethod(
---
>                 pool.connection = instancemethod(
./Run/ObjectStore.py
2,3c2,3
< import thread
< from types import ClassType
---
> import _thread
> #from types import ClassType
9c9
< from ObjectKey import ObjectKey
---
> from .ObjectKey import ObjectKey
17,18c17,18
< from PerThreadList import PerThreadList, NonThreadedList
< from PerThreadDict import PerThreadDict, NonThreadedDict
---
> from .PerThreadList import PerThreadList, NonThreadedList
> from .PerThreadDict import PerThreadDict, NonThreadedDict
161,162c161,162
<         elif isinstance(klass, (type, ClassType)):
<             klass = klass.__name__
---
>         #elif isinstance(klass, (type, ClassType)):
>         #    klass = klass.__name__
232c232
<         objectsToDel = objectsToDel.values()
---
>         objectsToDel = list(objectsToDel.values())
263,264c263,264
<             print 'checking %sdelete of %s.%d%s' % (
<                 cascadeString, obj.klass().name(), obj.serialNum(), dueTo)
---
>             print('checking %sdelete of %s.%d%s' % (
>                 cascadeString, obj.klass().name(), obj.serialNum(), dueTo))
335c335
<                     print 'will set %s.%d.%s to None' % (
---
>                     print('will set %s.%d.%s to None' % (
337c337
<                         referencingObject.serialNum(), referencingAttr.name())
---
>                         referencingObject.serialNum(), referencingAttr.name()))
349c349
<             threadid = thread.get_ident()
---
>             threadid = _thread.get_ident()
362c362
<             threadid = thread.get_ident()
---
>             threadid = _thread.get_ident()
391c391
<             self._hasChanges.discard(thread.get_ident())
---
>             self._hasChanges.discard(_thread.get_ident())
535,537c535,537
<             elif isinstance(aClass, ClassType):  # old Python classes
<                 aClass = self._model.klass(aClass.__name__)
<             elif isinstance(aClass, basestring):
---
>             #elif isinstance(aClass, ClassType):  # old Python classes
>             #    aClass = self._model.klass(aClass.__name__)
>             elif isinstance(aClass, str):
./WebBrowser/MixIns.py
36c36
<         """Get HTML for list of onjects.
---
>         """Get HTML for list of objects.
60d59
< 
71,73c70,72
<         ht = ['<tr>']
<         ht.append('<th class="TableHeading">class</th>')
<         ht.append('<th class="TableHeading">serial</th>')
---
>         ht = ['<tr>',
>               '<th class="TableHeading">class</th>',
>               '<th class="TableHeading">serial</th>']
84,86c83,85
<         ht = ['<tr>']
<         ht.append('<td class="TableData">%s</td>' % self.__class__.__name__)
<         ht.append('<td class="TableData">%i</td>' % self.serialNum())
---
>         ht = ['<tr>',
>               '<td class="TableData">%s</td>' % self.__class__.__name__,
>               '<td class="TableData">%i</td>' % self.serialNum()]
88,91d86
<             if attr.get('isDerived',False):
<                 value = self.valueForKey( attr.name() )
<             else:
<                 
93d87
<             
96,98d89
<         #provide a editlink @@if not BrowseObject
<         ht.append('<td><a href="EditObject?class=%s&serialNum=%u">Edit</a></td>' % ( self.klass().name(), self.serialNum() ) )
<         
122,128c113
<         if value is None:
<             return ''
<         #if type(value) == type( 2.0):
<         #    return '%.2f' % value
<         #s=str(value)
<         s = unicode(value).encode('utf8')
<         return htmlEncode(s)
---
>         return htmlEncode(str(value))
134,136c119,121
<         if isinstance(value, long):
<             classSerialNum = (value & 0xFFFFFFFF00000000L) >> 32
<             objSerialNum = value & 0xFFFFFFFFL
---
>         if isinstance(value, int):
>             classSerialNum = (value & 0xFFFFFFFF00000000) >> 32
>             objSerialNum = value & 0xFFFFFFFF
164,165c149,150
<                 exec 'from MiddleKit.%s.%s import %s' % (
<                     place, name, name) in nameSpace
---
>                 exec('from MiddleKit.%s.%s import %s' % (
>                     place, name, name), nameSpace)
166a152
>                 print("Cant import %s.%s " % (place, name))
174c160
<         assert mixed, 'Could not mix-in %s.' % name
---
>         assert mixed, Exception('Could not mix-in %s.' % name )
./WebBrowser/BrowseObjects.py
1c1
< from StorePage import StorePage
---
> from .StorePage import StorePage
6d5
<         
10,13d8
< 
<         #[ d['Class'] for d in store.model().klass('Video').descendants()]
<         if not self.store()._klassForClass(className ).isAbstract(): #190813 #@@tbd list subclasses
<             self.writeln("""<a href=NewObject?class=%s>Create new one</a>""" % className )
./WebBrowser/SelectModel.py
4c4
< from SitePage import SitePage
---
> from .SitePage import SitePage
./WebBrowser/EditObject.py
./WebBrowser/SelectDatabase.py
3c3
< from SitePage import SitePage
---
> from .SitePage import SitePage
./WebBrowser/StorePage.py
3a4
> #from MiddleKit.Run.MySQLObjectStore import MySQLObjectStore
5c6
< from SitePage import SitePage
---
> from .SitePage import SitePage
29,46d29
<     def awake(self, *args ):
<         SitePage.awake(self, *args )
<         #self.store()
<         #assert self._store.isConnected()
<             
<         #    if not st.isConnected():
<         #    st.connect()
<             
<         
<         
<     def sleep(self, *args):
<         
<         #if self.store(): #recommendation since 0.8
<         assert not self.store().hasChangesForCurrentThread()
<         #self.store().revertChanges() #@@tbd
<         
<         SitePage.sleep(self, *args)
<         
61,63c44,45
<             #    user=req.value('user'), passwd=req.value('password'))
<             self._store = SQLiteObjectStore(
<                 database = req.value('database')
---
>                 #user=req.value('user'), passwd=req.value('password')
>             self._store = SQLiteObjectStore(database=req.value('database'),
79c61,62
<         self.writeln('<p><a href="SelectModel" class="SelectLink">SELECT</a>'
---
>         self.writeln(
>             '<p><a href="SelectModel" class="SelectLink">SELECT</a>'
82c65,66
<         self.writeln('<p><a href="SelectDatabase" class="SelectLink">SELECT</a>'
---
>         self.writeln(
>             '<p><a href="SelectDatabase" class="SelectLink">SELECT</a>'
97c81
<             self.writeln('<p><a href="BrowseObjects?class=%s" class="%s">'
---
>             self.writeln('<p><a href="BrowseObjects?class=%s" class"=%s">'
./WebBrowser/BrowseList.py
1c1
< from StorePage import StorePage
---
> from .StorePage import StorePage
16,29d15
< 
<         objRef='%s.%u' % ( className, serialNum )
< 
<         
<         cl = self.store().model().klass(className) #190813
<         for attr in cl.allDataRefAttrs():
<             if attr.name() == attrName:
<                 refClassName = attr.className()
<                 refAttr=attr.backRefAttrName()
<                 break
<                 
<         
<         #@@if not isAbstract()
<         self.writeln('<a href="NewObject?class=%s&%s=%s">Append new %s</a>' % (refClassName,refAttr,objRef, refClassName) )
./WebBrowser/BrowseObject.py
1c1
< from StorePage import StorePage
---
> from .StorePage import StorePage
16,17d15
<             wr('<a class=TablePrefix >Object %s.%u</a>' % (className,serialNum))
<             
22,23d19
<         
<             self.writeln("""<a href="EditObject?class=%s&serialNum=%u">Edit</a>""" % (className,serialNum) )
\ Kein Zeilenumbruch am Dateiende.
./WebBrowser/NewObject.py
./WebBrowser/__init__.py
1c1
< debug = 0
---
> debug = 1
2a3
> #import sys
14,17c15,18
<         print '>> MiddleKit:', MiddleKit
<         print '>> getcwd:', os.getcwd()
<         print '>> sys.path:'
<         print '\n'.join(sys.path)
---
>         print('>> MiddleKit:', MiddleKit)
>         print('>> getcwd:', os.getcwd())
>         print('>> sys.path:')
>         print('\n'.join(sys.path))
20c21,23
<     import MixIns
---
>     #from . import MixIns
>     #sys.path.insert(1,'/home/nico/Downloads/wwtest/MyContext/WebBrowser')
>     #import MixIns
./WebBrowser/Main.py
1c1
< from SitePage import SitePage
---
> from .SitePage import SitePage
./WebBrowser/SitePage.py
2c2,3
< from WebKit.Page import Page
---
> #from WebKit.Page import Page
> from webware.Page import Page
4a6,10
> import sys
> sys.path.insert(1,'/home/nico/Downloads/wwtest/MyContext/WebBrowser')
> import MixIns
> 
> 
17,18c23,24
<         for key, value in d.items():
<             print '  %s = %s' % (key, value)
---
>         for key, value in list(d.items()):
>             print('  %s = %s' % (key, value))
23,24c29,30
<             print '>> About to writeHTML()'
<             print '>> fields:'
---
>             print('>> About to writeHTML()')
>             print('>> fields:')
26c32
<             print '>> cookies:'
---
>             print('>> cookies:')
28c34
<             print
---
>             print()
31,34d36
<     def writeMetaData(self ):
<         self.writeln('\t<meta charset="utf-8" />')
<         #self.writeln('\t<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">')
<         
89,90c91
<         for name, value in self.request().fields().items():
<             #@@we should constrain this to model, filename etc.
---
>         for name, value in list(self.request().fields().items()):
./WebBrowser/BrowseClasses.py
1c1
< from StorePage import StorePage
---
> from .StorePage import StorePage
./Core/IntAttr.py
1c1
< from BasicTypeAttr import BasicTypeAttr
---
> from .BasicTypeAttr import BasicTypeAttr
./Core/DateTimeAttrs.py
1c1
< from Attr import Attr
---
> from .Attr import Attr
./Core/TimeAttr.py
1c1
< from AnyDateTimeAttr import AnyDateTimeAttr
---
> from .AnyDateTimeAttr import AnyDateTimeAttr
./Core/Klasses.py
1,4c1,4
< from ModelObject import ModelObject
< from Model import Model, ModelError
< from Klass import Klass
< from Attr import Attr
---
> from .ModelObject import ModelObject
> from .Model import Model, ModelError
> from .Klass import Klass
> from .Attr import Attr
98,102c98,102
<                         print 'ERROR'
<                         print 'Required key %s not found in row:' % key
<                         print 'row:', row
<                         print 'keys:', row.keys()
<                         print row[key]  # throws exception
---
>                         print('ERROR')
>                         print('Required key %s not found in row:' % key)
>                         print('row:', row)
>                         print('keys:', list(row.keys()))
>                         print(row[key])  # throws exception
191c191
<             print klass
---
>             print(klass)
./Core/FloatAttr.py
1c1
< from BasicTypeAttr import BasicTypeAttr
---
> from .BasicTypeAttr import BasicTypeAttr
./Core/EnumAttr.py
1c1
< from Attr import Attr
---
> from .Attr import Attr
17c17
<         if isinstance(value, basestring):
---
>         if isinstance(value, str):
./Core/StringAttr.py
1c1
< from BasicTypeAttr import BasicTypeAttr
---
> from .BasicTypeAttr import BasicTypeAttr
./Core/ListAttr.py
1c1
< from Attr import Attr
---
> from .Attr import Attr
38c38
<         from Model import ModelError
---
>         from .Model import ModelError
./Core/DateAttr.py
1c1
< from AnyDateTimeAttr import AnyDateTimeAttr
---
> from .AnyDateTimeAttr import AnyDateTimeAttr
./Core/LongAttr.py
1c1
< from BasicTypeAttr import BasicTypeAttr
---
> from .BasicTypeAttr import BasicTypeAttr
9c9
<             self['Max'] = long(self['Max'])
---
>             self['Max'] = int(self['Max'])
11c11
<             self['Min'] = long(self['Min'])
---
>             self['Min'] = int(self['Min'])
./Core/BasicTypeAttr.py
1c1
< from Attr import Attr
---
> from .Attr import Attr
./Core/ModelUser.py
56,57c56,57
<             print '>> installMixIns()'
<             print 'class =', self.__class__
---
>             print('>> installMixIns()')
>             print('class =', self.__class__)
61c61
<             print 'modules =', ', '.join(modules)
---
>             print('modules =', ', '.join(modules))
70c70
<             print
---
>             print()
79c79
<             print '>>', module
---
>             print('>>', module)
89c89
<                             print '>> mixing %s into %s' % (generatorThing, baseClass)
---
>                             print('>> mixing %s into %s' % (generatorThing, baseClass))
108c108
<         print 'WARNING:', msg
---
>         print('WARNING:', msg)
./Core/ModelObject.py
13,14c13,14
<         out.write('self  attrs = %s\n' % self.__dict__.keys())
<         out.write('class attrs = %s\n' % self.__class__.__dict__.keys())
---
>         out.write('self  attrs = %s\n' % list(self.__dict__.keys()))
>         out.write('class attrs = %s\n' % list(self.__class__.__dict__.keys()))
./Core/Model.py
5c5
<     from cPickle import load, dump
---
>     from pickle import load, dump
30c30
<             print '%s:%d: %s' % (filename, self._line, self._error)
---
>             print('%s:%d: %s' % (filename, self._line, self._error))
32c32
<             print '%s: %s' % (filename, self._error)
---
>             print('%s: %s' % (filename, self._error))
99,100c99,100
<             print
<             print 'Error while reading model:'
---
>             print()
>             print('Error while reading model:')
155c155
<         for name, klass in byName.items():
---
>         for name, klass in list(byName.items()):
190c190
<         for i in reversed(range(len(searchOrder))):
---
>         for i in reversed(list(range(len(searchOrder)))):
234c234
<             exec 'import MiddleKit.Core.%s as module'% className in results
---
>             exec('import MiddleKit.Core.%s as module'% className, results)
343c343
<                 exec 'import %s%s as module' % (pkg, name) in results
---
>                 exec('import %s%s as module' % (pkg, name), results)
./Core/MiddleDict.py
20c20
<         if isinstance(s, basestring):
---
>         if isinstance(s, str):
./Core/__init__.py
./Core/AnyDateTimeAttr.py
1c1
< from Attr import Attr
---
> from .Attr import Attr
./Core/DateTimeAttr.py
1c1
< from AnyDateTimeAttr import AnyDateTimeAttr
---
> from .AnyDateTimeAttr import AnyDateTimeAttr
./Core/ObjRefAttr.py
1c1
< from Attr import Attr
---
> from .Attr import Attr
6c6
<     return (long(klassId) << 32) | long(serialNum)
---
>     return (int(klassId) << 32) | int(serialNum)
10c10
<     return (objRef & 0xFFFFFFFF00000000L) >> 32, objRef & 0xFFFFFFFFL
---
>     return (objRef & 0xFFFFFFFF00000000) >> 32, objRef & 0xFFFFFFFF
35c35
<             from Model import ModelError
---
>             from .Model import ModelError
./Core/BoolAttr.py
1c1
< from BasicTypeAttr import BasicTypeAttr
---
> from .BasicTypeAttr import BasicTypeAttr
./Core/DecimalAttr.py
1c1
< from BasicTypeAttr import BasicTypeAttr
---
> from .BasicTypeAttr import BasicTypeAttr
./Core/Klass.py
1c1
< from ModelObject import ModelObject
---
> from .ModelObject import ModelObject
5c5
< from MiddleDict import MiddleDict
---
> from .MiddleDict import MiddleDict
62c62
<         for key, value in rawDict.items():
---
>         for key, value in list(rawDict.items()):
64c64
<             if isinstance(value, basestring) and not value.strip():
---
>             if isinstance(value, str) and not value.strip():
./Core/Attr.py
3c3
< from ModelObject import ModelObject
---
> from .ModelObject import ModelObject
5c5
< from MiddleDict import MiddleDict
---
> from .MiddleDict import MiddleDict
21c21
<         for key, value in attr.items():
---
>         for key, value in list(attr.items()):
24c24
<             if isinstance(value, basestring) and not value.strip():
---
>             if isinstance(value, str) and not value.strip():
./Design/Doc.py
1c1
< #!/usr/bin/env python
---
> #!/usr/bin/env python2
13c13
< import FixPath
---
> from . import FixPath
218c218
<             print klass
---
>             print(klass)
220c220
<                 print attr
---
>                 print(attr)
226c226
<             print 'Error: Output target, %s, is not a directory.' % d
---
>             print('Error: Output target, %s, is not a directory.' % d)
234c234
<             if isinstance(self.otherKeys, basestring):
---
>             if isinstance(self.otherKeys, str):
239c239
<             if isinstance(moreKeys, basestring):
---
>             if isinstance(moreKeys, str):
258,259c258,259
<             print '%s: error: %s' % (progName, errorMsg)
<         print '''
---
>             print('%s: error: %s' % (progName, errorMsg))
>         print('''
277,278c277,278
< ''' % locals()
<         print
---
> ''' % locals())
>         print()
304c304
<         s = s.replace(u'\u201c', '"').replace(u'\u201d', '"')
---
>         s = s.replace('\u201c', '"').replace('\u201d', '"')
./Design/PostgreSQLSQLGenerator.py
16,17c16,17
< from SQLGenerator import SQLGenerator
< from SQLGenerator import PrimaryKey as PrimaryKeyBase
---
> from .SQLGenerator import SQLGenerator
> from .SQLGenerator import PrimaryKey as PrimaryKeyBase
./Design/MSSQLPythonGenerator.py
1c1
< from SQLPythonGenerator import SQLPythonGenerator
---
> from .SQLPythonGenerator import SQLPythonGenerator
./Design/FixPath.py
15c15
<             print 'took location from __file__'
---
>             print('took location from __file__')
20c20
<             print 'took location from sys.argv[0]'
---
>             print('took location from sys.argv[0]')
25c25
<         print 'location =', location
---
>         print('location =', location)
40c40
<                 print 'MiddleKit in location'
---
>                 print('MiddleKit in location')
43c43
<                 print 'new location =', location
---
>                 print('new location =', location)
46c46
<             print 'final location =', location
---
>             print('final location =', location)
49,51c49,51
<         print 'path =', sys.path
<         print
<         print 'importing MiddleKit...'
---
>         print('path =', sys.path)
>         print()
>         print('importing MiddleKit...')
54c54
<         print 'done.'
---
>         print('done.')
./Design/CodeGenerator.py
57c57
<     def writeInfoItems(self, file):
---
>     def writeInfoItems(self, f):
59,63c59,63
<         wr(file, 'Date', asclocaltime())
<         wr(file, 'Python ver', sys.version)
<         wr(file, 'Op Sys', os.name)
<         wr(file, 'Platform', sys.platform)
<         wr(file, 'Cur dir', os.getcwd())
---
>         wr(f, 'Date', asclocaltime())
>         wr(f, 'Python ver', sys.version)
>         wr(f, 'Op Sys', os.name)
>         wr(f, 'Platform', sys.platform)
>         wr(f, 'Cur dir', os.getcwd())
./Design/Generate.py
1c1
< #!/usr/bin/env python
---
> #!/usr/bin/env python2
10a11
> #from . import FixPath
35c36
<             print 'Error: Output target, %s, is not a directory.' % outdir
---
>             print('Error: Output target, %s, is not a directory.' % outdir)
39c40
<             print 'Generating SQL...'
---
>             print('Generating SQL...')
46c47
<             print 'Generating Python...'
---
>             print('Generating Python...')
60,62c61,63
<             print '%s: error: %s' % (progName, errorMsg)
<             print
<         print '''\
---
>             print('%s: error: %s' % (progName, errorMsg))
>             print()
>         print('''\
73c74
< '''  % (progName, progName, ', '.join(self.databases()))
---
> '''  % (progName, progName, ', '.join(self.databases())))
79c80
<         if isinstance(args, basestring):
---
>         if isinstance(args, str):
119,120c120,122
<         if isinstance(pyClass, basestring):
<             module = __import__(pyClass, globals())
---
>         if isinstance(pyClass, str):
>             #module = __import__(pyClass, globals())
>             module = __import__('MiddleKit.Design.%s' % pyClass, globals(), locals(), [pyClass],0)
123c125
<         if isinstance(model, basestring):
---
>         if isinstance(model, str):
./Design/SQLitePythonGenerator.py
1c1,2
< from SQLPythonGenerator import SQLPythonGenerator
---
> #from .SQLPythonGenerator import SQLPythonGenerator
> from MiddleKit.Design.SQLPythonGenerator import SQLPythonGenerator
./Design/SQLiteSQLGenerator.py
2,3c2,3
< 
< from SQLGenerator import SQLGenerator
---
> #from .SQLGenerator import SQLGenerator
> from MiddleKit.Design.SQLGenerator import SQLGenerator
./Design/PostgreSQLPythonGenerator.py
1c1
< from SQLPythonGenerator import SQLPythonGenerator
---
> from .SQLPythonGenerator import SQLPythonGenerator
./Design/SQLPythonGenerator.py
1,2c1,2
< from PythonGenerator import PythonGenerator
< from PythonGenerator import Klass as SuperKlass
---
> from .PythonGenerator import PythonGenerator
> from .PythonGenerator import Klass as SuperKlass
12c12,13
<         SuperKlass.writePyImports.im_func(self)  # invoke our super generator's method
---
>         #SuperKlass.writePyImports.__func__(self)  # invoke our super generator's method
>         SuperKlass.writePyImports(self)  # invoke our super generator's method
./Design/PythonGenerator.py
6c6
< from CodeGenerator import CodeGenerator
---
> from .CodeGenerator import CodeGenerator
50c50
<         if isinstance(out, basestring):
---
>         if isinstance(out, str):
118c118
<             for i in xrange(pkg.count('.') + 1):
---
>             for i in range(pkg.count('.') + 1):
176c176
<             if isinstance(default, basestring):
---
>             if isinstance(default, str):
280c280,281
<         Attr.writePySetChecks.im_func(self, out)
---
>         #Attr.writePySetChecks.__func__(self, out)
>         Attr.writePySetChecks(self, out)
296c297,298
<         Attr.writePySetChecks.im_func(self, out)
---
>         #Attr.writePySetChecks.__func__(self, out)
>         Attr.writePySetChecks(self, out)
299c301
<             if isinstance(value, long):
---
>             if isinstance(value, int):
301,302c303,304
<                 if isinstance(value, long):
<                     raise OverflowError(value)
---
>                 #if isinstance(value, int):
>                 #    raise OverflowError(value)
311c313
<         return long(string)
---
>         return int(string)
314c316,317
<         Attr.writePySetChecks.im_func(self, out)
---
>         #Attr.writePySetChecks.__func__(self, out)
>         Attr.writePySetChecks(self, out)
318,320c321,323
<                 value = long(value)
<             elif not isinstance(value, long):
<                 raise TypeError('expecting long type, but got value %r of type %r instead' % (value, type(value)))
---
>                 value = int(value)
>             elif not isinstance(value, int):
>                 raise TypeError('expecting int type, but got value %r of type %r instead' % (value, type(value)))
330c333,334
<         Attr.writePySetChecks.im_func(self, out)
---
>         #Attr.writePySetChecks.__func__(self, out)
>         Attr.writePySetChecks(self, out)
333c337
<             if isinstance(value, (int, long)):
---
>             if isinstance(value, (int, int)):
346c350,351
<         Attr.writePySetChecks.im_func(self, out)
---
>         #Attr.writePySetChecks.__func__(self, out)
>         Attr.writePySetChecks(self, out)
349c354
<             if isinstance(value, (int, long)):
---
>             if isinstance(value, (int, int)):
364c369,370
<         Attr.writePySetChecks.im_func(self, out)
---
>         #Attr.writePySetChecks.__func__(self, out)
>         Attr.writePySetChecks(self, out)
367c373
<             if not isinstance(value, basestring):
---
>             if not isinstance(value, str):
381c387,388
<         Attr.writePyAccessors.im_func(self, out)
---
>         #Attr.writePyAccessors.__func__(self, out)
>         Attr.writePyAccessors(self, out)
398c405,406
<         Attr.writePySetChecks.im_func(self, out)
---
>         #Attr.writePySetChecks.__func__(self, out)
>         Attr.writePySetChecks(self, out)
407c415
<             if isinstance(value, basestring):
---
>             if isinstance(value, str):
412c420
<             elif not isinstance(value, (int, long)):
---
>             elif not isinstance(value, (int, int)):
420c428
<             if not isinstance(value, basestring):
---
>             if not isinstance(value, str):
461c469,470
<         Attr.writePySetChecks.im_func(self, out)
---
>         #Attr.writePySetChecks.__func__(self, out)
>         Attr.writePySetChecks(self, out)
463c472
<         if not isinstance(typeName, basestring):
---
>         if not isinstance(typeName, str):
467c476
<             if isinstance(value, basestring):
---
>             if isinstance(value, str):
495a505
>         #Attr.writePySetChecks(self, out)
512a523
>         #Attr.writePySetChecks(self, out)
552c563
<         if value is not None and not isinstance(value, long):
---
>         if value is not None and not isinstance(value, int):
./Design/KlassSQLSerialColumnName.py
./Design/MSSQLSQLGenerator.py
6c6
< from SQLGenerator import SQLGenerator
---
> from .SQLGenerator import SQLGenerator
./Design/FirebirdPythonGenerator.py
1c1
< from SQLPythonGenerator import SQLPythonGenerator
---
> from .SQLPythonGenerator import SQLPythonGenerator
./Design/MySQLSQLGenerator.py
1c1
< from SQLGenerator import SQLGenerator
---
> from .SQLGenerator import SQLGenerator
31c31
<         return 'show tables\n\n'
---
>         return 'show tables;\n\n'
./Design/SQLGenerator.py
10c10
< from CodeGenerator import *
---
> from .CodeGenerator import *
21c21
<         print '%s:%d: %s' % (filename, self._line, self._error)
---
>         print('%s:%d: %s' % (filename, self._line, self._error))
131c131,132
<                     self.writeInsertSamplesSQLForLines(lines, generator, file, filename)
---
>                     #self.writeInsertSamplesSQLForLines(lines, generator, file, filename)
>                     self.writeInsertSamplesSQLForLines(lines, generator, f, filename)
149c150
<     def writePostKlassSamplesSQL(self, generator, file):
---
>     def writePostKlassSamplesSQL(self, generator, f):
152c153
<     def writeInsertSamplesSQLForLines(self, lines, generator, file, filename):
---
>     def writeInsertSamplesSQLForLines(self, lines, generator, f, filename):
170d170
<                     #print ">>>>", fields
291,292c291,292
<                     print
<                     print 'Samples error:'
---
>                     print()
>                     print('Samples error:')
294,295c294,295
<                         print '%s:%s' % (filename, linenum)
<                         print line
---
>                         print('%s:%s' % (filename, linenum))
>                         print(line)
298c298
<                     print
---
>                     print()
341c341
<         if isinstance(out, basestring):
---
>         if isinstance(out, str):
457c457,458
< import KlassSQLSerialColumnName
---
> #from . import KlassSQLSerialColumnName
> import MiddleKit.Design.KlassSQLSerialColumnName
585c586
<             assert isinstance(s, (basestring, tuple)), \
---
>             assert isinstance(s, (str, tuple)), \
607,608c608,609
<             print 'Exception for attribute:'
<             print '%s.%s' % (self.klass().name(), self.name())
---
>             print('Exception for attribute:')
>             print('%s.%s' % (self.klass().name(), self.name()))
725c726
<         long(input)  # raises exception if value is invalid
---
>         int(input)  # raises exception if value is invalid
./Design/__init__.py
2a3,4
> # For relative imports to work in Python 3.6
> #import os, sys; sys.path.append(os.path.dirname(os.path.realpath(__file__)))
./Design/MySQLPythonGenerator.py
1c1
< from SQLPythonGenerator import SQLPythonGenerator
---
> from .SQLPythonGenerator import SQLPythonGenerator
./Design/FirebirdSQLGenerator.py
7c7
< from kinterbasdb import Warning, DatabaseError
---
> from fdb import DatabaseError
13c13
< from SQLGenerator import SQLGenerator
---
> from .SQLGenerator import SQLGenerator
25c25
<         output.write("connect '/Temp/mktemp.fdb' user 'SYSDBA' password 'masterkey' ;\n\n" ) #% databasename)
---
>         output.write("connect '/tmp/mktemp.fdb' user 'SYSDBA' password 'masterkey' ;\n\n" ) #% databasename)
50,51c50
<         return self.dropTablesSQL()
<         
---
>         return ''
55,56c54,55
<         for tableName in reversed(self.auxiliaryTableNames()):
<             sql.append('drop table "%s";\n' % tableName)
---
>         #for tableName in reversed(self.auxiliaryTableNames()):
>         #    sql.append('drop table "%s";\n' % tableName)
64c63
<         return "create database '/Temp/mktemp.fdb' user 'SYSDBA' password 'masterkey'; \n"
---
>         return "create database '/tmp/mktemp.fdb' user 'SYSDBA' password 'masterkey'; \n"
68c67
<         return '' #"connect '/Temp/mktemp.fdb' users 'SYSDBA' password 'masterkey';\n"
---
>         return ''
81c80
< from string import lower 
---
> #from string import lower 
89d87
<             pass
102c100
<         if tn[0]=='_' or lower(tn) in map(lower,dont_use_relnames) :
---
>         if tn[0]=='_' or tn.lower() in list(dont_use_relnames) :
129c127
<         if x.lower() in map(lower,dont_use_columnnames ):
---
>         if x.lower() in list(dont_use_columnnames ):
130a129
>         else:
134c133,134
<     
---
>     #def sqlColumnName(self):
>     #   """Return the SQL column name corresponding to this attribute."""
200d199
<     
./__init__.py
8c8,10
< def InstallInWebKit(appServer):
---
> #def InstallInWebKit(appServer):
> #    pass
> def installInWebware(application):
9a12
> 
./Docs/Videos/Command/main.py
7c7,8
< from MiddleKit.Run.MySQLObjectStore import MySQLObjectStore
---
> #from MiddleKit.Run.MySQLObjectStore import MySQLObjectStore
> from MiddleKit.Run.SQLiteObjectStore import SQLiteObjectStore
17c18
<     store = MySQLObjectStore()
---
>     store = SQLiteObjectStore(database='/tmp/123.db')
41c42
<     store.saveChanges()
---
>     #store.saveChanges()
./Docs/Videos/Middle/Video.py
6c6
< from GeneratedPy.GenVideo import GenVideo
---
> from .GeneratedPy.GenVideo import GenVideo
./Docs/Videos/Middle/Person.py
6c6
< from GeneratedPy.GenPerson import GenPerson
---
> from .GeneratedPy.GenPerson import GenPerson
./Docs/Videos/Middle/GeneratedPy/GenTVSeries.py
39c39
<             if isinstance(value, long):
---
>             if isinstance(value, int):
41,42c41,42
<                 if isinstance(value, long):
<                     raise OverflowError(value)
---
>                 #if isinstance(value, int):
>                 #    raise OverflowError(value)
./Docs/Videos/Middle/GeneratedPy/GenPerson.py
42c42
<         if value is not None and not isinstance(value, long):
---
>         if value is not None and not isinstance(value, int):
75c75
<             if not isinstance(value, basestring):
---
>             if not isinstance(value, str):
104,109d103
<         if value is not None:
<             if isinstance(value, basestring):
<                 value = parseDate(value)
<             if not isinstance(value, date):
<                 raise TypeError('expecting date type (e.g., date), but got'
<                     ' value %r of type %r instead' % (value, type(value)))
./Docs/Videos/Middle/GeneratedPy/GenRole.py
42c42
<         if value is not None and not isinstance(value, long):
---
>         if value is not None and not isinstance(value, int):
75c75
<             if not isinstance(value, basestring):
---
>             if not isinstance(value, str):
108c108
<         if value is not None and not isinstance(value, long):
---
>         if value is not None and not isinstance(value, int):
./Docs/Videos/Middle/GeneratedPy/__init__.py
./Docs/Videos/Middle/GeneratedPy/GenVideo.py
45c45
<             if not isinstance(value, basestring):
---
>             if not isinstance(value, str):
./Docs/Videos/Middle/GeneratedPy/GenMovie.py
42c42
<             if isinstance(value, long):
---
>             if isinstance(value, int):
44,45c44,45
<                 if isinstance(value, long):
<                     raise OverflowError(value)
---
>                 #if isinstance(value, int):
>                 #    raise OverflowError(value)
79c79
<             if not isinstance(value, basestring):
---
>             if not isinstance(value, str):
./Docs/Videos/Middle/TVSeries.py
6c6
< from GeneratedPy.GenTVSeries import GenTVSeries
---
> from .GeneratedPy.GenTVSeries import GenTVSeries
./Docs/Videos/Middle/Role.py
6c6
< from GeneratedPy.GenRole import GenRole
---
> from .GeneratedPy.GenRole import GenRole
./Docs/Videos/Middle/Movie.py
6c6
< from GeneratedPy.GenMovie import GenMovie
---
> from .GeneratedPy.GenMovie import GenMovie
./Docs/Videos/Middle/__init__.py
./Docs/__init__.py
