'''
GenPerson.py
Generated by MiddleKit.
'''

# MK attribute caches for setFoo() methods
_idAttr = None
_firstNameAttr = None
_middleNameAttr = None
_lastNameAttr = None


from datetime import date, datetime, time, timedelta
from decimal import Decimal
from MiscUtils.DateParser import parseDateTime, parseDate, parseTime
from MiddleKit.Run.MiddleObject import MiddleObject


from MiddleKit.Run.MiddleObject import MiddleObject
from MiddleKit.Run.SQLObjectStore import ObjRefError



class GenPerson(MiddleObject):

    def __init__(self):
        MiddleObject.__init__(self)
        self._id         = None
        self._firstName  = None
        self._middleName = None
        self._lastName   = None


    def id(self):
        return self._id

    def setId(self, value):
        if value is not None:
            if not isinstance(value, str):
                raise TypeError('expecting string type, but got value %r of type %r instead' % (value, type(value)))

        # set the attribute
        origValue = self._id
        self._id = value

        # MiddleKit machinery
        if not self._mk_initing and self._mk_serialNum>0 and value is not origValue:
            global _idAttr
            if _idAttr is None:
                _idAttr = self.klass().lookupAttr('id')
                if not _idAttr.shouldRegisterChanges():
                    _idAttr = 0
            if _idAttr:
                # Record that it has been changed
                self._mk_changed = True
                if self._mk_changedAttrs is None:
                    self._mk_changedAttrs = {}  # maps name to attribute
                self._mk_changedAttrs['id'] = _idAttr  # changedAttrs is a set
                # Tell ObjectStore it happened
                self._mk_store.objectChanged(self)

    def firstName(self):
        return self._firstName

    def setFirstName(self, value):
        if value is not None:
            if not isinstance(value, str):
                raise TypeError('expecting string type, but got value %r of type %r instead' % (value, type(value)))

        # set the attribute
        origValue = self._firstName
        self._firstName = value

        # MiddleKit machinery
        if not self._mk_initing and self._mk_serialNum>0 and value is not origValue:
            global _firstNameAttr
            if _firstNameAttr is None:
                _firstNameAttr = self.klass().lookupAttr('firstName')
                if not _firstNameAttr.shouldRegisterChanges():
                    _firstNameAttr = 0
            if _firstNameAttr:
                # Record that it has been changed
                self._mk_changed = True
                if self._mk_changedAttrs is None:
                    self._mk_changedAttrs = {}  # maps name to attribute
                self._mk_changedAttrs['firstName'] = _firstNameAttr  # changedAttrs is a set
                # Tell ObjectStore it happened
                self._mk_store.objectChanged(self)

    def middleName(self):
        return self._middleName

    def setMiddleName(self, value):
        if value is not None:
            if not isinstance(value, str):
                raise TypeError('expecting string type, but got value %r of type %r instead' % (value, type(value)))

        # set the attribute
        origValue = self._middleName
        self._middleName = value

        # MiddleKit machinery
        if not self._mk_initing and self._mk_serialNum>0 and value is not origValue:
            global _middleNameAttr
            if _middleNameAttr is None:
                _middleNameAttr = self.klass().lookupAttr('middleName')
                if not _middleNameAttr.shouldRegisterChanges():
                    _middleNameAttr = 0
            if _middleNameAttr:
                # Record that it has been changed
                self._mk_changed = True
                if self._mk_changedAttrs is None:
                    self._mk_changedAttrs = {}  # maps name to attribute
                self._mk_changedAttrs['middleName'] = _middleNameAttr  # changedAttrs is a set
                # Tell ObjectStore it happened
                self._mk_store.objectChanged(self)

    def lastName(self):
        return self._lastName

    def setLastName(self, value):
        if value is not None:
            if not isinstance(value, str):
                raise TypeError('expecting string type, but got value %r of type %r instead' % (value, type(value)))

        # set the attribute
        origValue = self._lastName
        self._lastName = value

        # MiddleKit machinery
        if not self._mk_initing and self._mk_serialNum>0 and value is not origValue:
            global _lastNameAttr
            if _lastNameAttr is None:
                _lastNameAttr = self.klass().lookupAttr('lastName')
                if not _lastNameAttr.shouldRegisterChanges():
                    _lastNameAttr = 0
            if _lastNameAttr:
                # Record that it has been changed
                self._mk_changed = True
                if self._mk_changedAttrs is None:
                    self._mk_changedAttrs = {}  # maps name to attribute
                self._mk_changedAttrs['lastName'] = _lastNameAttr  # changedAttrs is a set
                # Tell ObjectStore it happened
                self._mk_store.objectChanged(self)

