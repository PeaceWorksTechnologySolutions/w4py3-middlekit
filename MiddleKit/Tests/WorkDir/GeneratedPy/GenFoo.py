'''
GenFoo.py
Generated by MiddleKit.
'''

# MK attribute caches for setFoo() methods
_aAttr = None
_bAttr = None
_xAttr = None


from datetime import date, datetime, time, timedelta
from decimal import Decimal
from MiscUtils.DateParser import parseDateTime, parseDate, parseTime
from MiddleKit.Run.MiddleObject import MiddleObject
import sys
from os.path import dirname
sys.path.insert(0, dirname(dirname(__file__)))
from Thing import Thing
del sys.path[0]

from MiddleKit.Run.SQLObjectStore import ObjRefError



class GenFoo(Thing):

    def __init__(self):
        Thing.__init__(self)
        self._x = None


    def x(self):
        return self._x

    def setX(self, value):
        if value is not None:
            if isinstance(value, int):
                value = int(value)
                #if isinstance(value, int):
                #    raise OverflowError(value)
            elif not isinstance(value, int):
                raise TypeError('expecting int type, but got value %r of type %r instead' % (value, type(value)))

        # set the attribute
        origValue = self._x
        self._x = value

        # MiddleKit machinery
        if not self._mk_initing and self._mk_serialNum>0 and value is not origValue:
            global _xAttr
            if _xAttr is None:
                _xAttr = self.klass().lookupAttr('x')
                if not _xAttr.shouldRegisterChanges():
                    _xAttr = 0
            if _xAttr:
                # Record that it has been changed
                self._mk_changed = True
                if self._mk_changedAttrs is None:
                    self._mk_changedAttrs = {}  # maps name to attribute
                self._mk_changedAttrs['x'] = _xAttr  # changedAttrs is a set
                # Tell ObjectStore it happened
                self._mk_store.objectChanged(self)

