'''
GenVideo.py
Generated by MiddleKit.
'''

# MK attribute caches for setFoo() methods
_titleAttr = None
_directorsAttr = None
_castAttr = None


from datetime import date, datetime, time, timedelta
from decimal import Decimal
from MiscUtils.DateParser import parseDateTime, parseDate, parseTime
from MiddleKit.Run.MiddleObject import MiddleObject


from MiddleKit.Run.MiddleObject import MiddleObject
from MiddleKit.Run.SQLObjectStore import ObjRefError



class GenVideo(MiddleObject):

    def __init__(self):
        MiddleObject.__init__(self)
        self._title     = None
        self._directors = []
        self._cast      = []


    def readStoreData(self, store, row):
        if not self._mk_inStore:
            self._directors = None
            self._cast = None
        MiddleObject.readStoreData(self, store, row)


    def title(self):
        return self._title

    def setTitle(self, value):
        assert value is not None
        if value is not None:
            if not isinstance(value, basestring):
                raise TypeError('expecting string type, but got value %r of type %r instead' % (value, type(value)))

        # set the attribute
        origValue = self._title
        self._title = value

        # MiddleKit machinery
        if not self._mk_initing and self._mk_serialNum>0 and value is not origValue:
            global _titleAttr
            if _titleAttr is None:
                _titleAttr = self.klass().lookupAttr('title')
                if not _titleAttr.shouldRegisterChanges():
                    _titleAttr = 0
            if _titleAttr:
                # Record that it has been changed
                self._mk_changed = True
                if self._mk_changedAttrs is None:
                    self._mk_changedAttrs = {}  # maps name to attribute
                self._mk_changedAttrs['title'] = _titleAttr  # changedAttrs is a set
                # Tell ObjectStore it happened
                self._mk_store.objectChanged(self)

    def directors(self):
        if self._directors is None:
            from Middle.Person import Person
            self._directors = self._mk_store.fetchObjectsOfClass(Person, clauses='where videoClassId=%i and videoObjId=%i' % (self.klass().id(), self.serialNum()))
        return self._directors

    def addToDirectors(self, value):
        assert value is not None
        from Middle.Person import Person
        assert isinstance(value, Person)
        assert value.video() is None
        self.directors().append(value)
        value.setValueForKey('video', self)
        store = self.store()
        if value.serialNum() == 0 and self.isInStore():
            store.addObject(value)

    def delFromDirectors(self, value):
        assert value is not None
        from Middle.Person import Person
        assert isinstance(value, Person)
        assert value.video() is self
        assert value in self.directors()
        self.directors().remove(value)
        value.setValueForKey('video', None)
        store = self.store()
        if self.isInStore() and value.isInStore():
            store.deleteObject(value)

    def cast(self):
        if self._cast is None:
            from Middle.Role import Role
            self._cast = self._mk_store.fetchObjectsOfClass(Role, clauses='where videoClassId=%i and videoObjId=%i' % (self.klass().id(), self.serialNum()))
        return self._cast

    def addToCast(self, value):
        assert value is not None
        from Middle.Role import Role
        assert isinstance(value, Role)
        assert value.video() is None
        self.cast().append(value)
        value.setValueForKey('video', self)
        store = self.store()
        if value.serialNum() == 0 and self.isInStore():
            store.addObject(value)

    def delFromCast(self, value):
        assert value is not None
        from Middle.Role import Role
        assert isinstance(value, Role)
        assert value.video() is self
        assert value in self.cast()
        self.cast().remove(value)
        value.setValueForKey('video', None)
        store = self.store()
        if self.isInStore() and value.isInStore():
            store.deleteObject(value)

