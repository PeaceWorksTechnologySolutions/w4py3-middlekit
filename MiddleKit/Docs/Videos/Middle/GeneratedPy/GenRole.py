'''
GenRole.py
Generated by MiddleKit.
'''

# MK attribute caches for setFoo() methods
_videoAttr = None
_karacterAttr = None
_personAttr = None


from datetime import date, datetime, time, timedelta
from decimal import Decimal
from MiscUtils.DateParser import parseDateTime, parseDate, parseTime
from MiddleKit.Run.MiddleObject import MiddleObject


from MiddleKit.Run.MiddleObject import MiddleObject
from MiddleKit.Run.SQLObjectStore import ObjRefError



class GenRole(MiddleObject):

    def __init__(self):
        MiddleObject.__init__(self)
        self._video    = None
        self._karacter = None
        self._person   = None


    def video(self):
        if self._video is not None and not isinstance(self._video, MiddleObject):
            try:
                self.__dict__['_video'] = self._mk_store.fetchObjRef(self._video)
            except ObjRefError as e:
                self.__dict__['_video'] = self.objRefErrorWasRaised(e, 'Role', 'video')
        return self._video

    def setVideo(self, value):
        assert value is not None
        if value is not None and not isinstance(value, int):
            if not isinstance(value, MiddleObject):
                raise TypeError('expecting a MiddleObject, but got value %r of type %r instead' % (value, type(value)))
            from Middle.Video import Video
            if not isinstance(value, Video):
                raise TypeError('expecting Video, but got value %r of type %r instead' % (value, type(value)))

        # set the attribute
        origValue = self._video
        self._video = value

        # MiddleKit machinery
        if not self._mk_initing and self._mk_serialNum>0 and value is not origValue:
            global _videoAttr
            if _videoAttr is None:
                _videoAttr = self.klass().lookupAttr('video')
                if not _videoAttr.shouldRegisterChanges():
                    _videoAttr = 0
            if _videoAttr:
                # Record that it has been changed
                self._mk_changed = True
                if self._mk_changedAttrs is None:
                    self._mk_changedAttrs = {}  # maps name to attribute
                self._mk_changedAttrs['video'] = _videoAttr  # changedAttrs is a set
                # Tell ObjectStore it happened
                self._mk_store.objectChanged(self)

    def karacter(self):
        return self._karacter

    def setKaracter(self, value):
        assert value is not None
        if value is not None:
            if not isinstance(value, str):
                raise TypeError('expecting string type, but got value %r of type %r instead' % (value, type(value)))

        # set the attribute
        origValue = self._karacter
        self._karacter = value

        # MiddleKit machinery
        if not self._mk_initing and self._mk_serialNum>0 and value is not origValue:
            global _karacterAttr
            if _karacterAttr is None:
                _karacterAttr = self.klass().lookupAttr('karacter')
                if not _karacterAttr.shouldRegisterChanges():
                    _karacterAttr = 0
            if _karacterAttr:
                # Record that it has been changed
                self._mk_changed = True
                if self._mk_changedAttrs is None:
                    self._mk_changedAttrs = {}  # maps name to attribute
                self._mk_changedAttrs['karacter'] = _karacterAttr  # changedAttrs is a set
                # Tell ObjectStore it happened
                self._mk_store.objectChanged(self)

    def person(self):
        if self._person is not None and not isinstance(self._person, MiddleObject):
            try:
                self.__dict__['_person'] = self._mk_store.fetchObjRef(self._person)
            except ObjRefError as e:
                self.__dict__['_person'] = self.objRefErrorWasRaised(e, 'Role', 'person')
        return self._person

    def setPerson(self, value):
        assert value is not None
        if value is not None and not isinstance(value, int):
            if not isinstance(value, MiddleObject):
                raise TypeError('expecting a MiddleObject, but got value %r of type %r instead' % (value, type(value)))
            from Middle.Person import Person
            if not isinstance(value, Person):
                raise TypeError('expecting Person, but got value %r of type %r instead' % (value, type(value)))

        # set the attribute
        origValue = self._person
        self._person = value

        # MiddleKit machinery
        if not self._mk_initing and self._mk_serialNum>0 and value is not origValue:
            global _personAttr
            if _personAttr is None:
                _personAttr = self.klass().lookupAttr('person')
                if not _personAttr.shouldRegisterChanges():
                    _personAttr = 0
            if _personAttr:
                # Record that it has been changed
                self._mk_changed = True
                if self._mk_changedAttrs is None:
                    self._mk_changedAttrs = {}  # maps name to attribute
                self._mk_changedAttrs['person'] = _personAttr  # changedAttrs is a set
                # Tell ObjectStore it happened
                self._mk_store.objectChanged(self)

